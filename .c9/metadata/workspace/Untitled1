{"changed":true,"filter":false,"title":"Untitled1","tooltip":"/Untitled1","value":"Notes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\nNotes about labs:\nAll labs are DUE by 5PM the day after the lab\nNo late labs will be accepted\nEach labs counts as 2 homeworks\n\n1. Write a simple file copy program that \na. Asks for, then reads the full path and name of an input file\nb. Asks for, then reads the full path and name of an output file\nc. Opens the input file\nd. Reads data 1 byte at a time (be sure to use binary reading)\ne. Writes the data to the output file\nf. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file\ng. Prints the CPU time used.  \nh. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project\nNOTES:\n1. Use the definition of the input file used for the Producer/Consumer Project\n2. If you use printf to print the times, use the format 10.3f to get proper results.\n3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.\n4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)\nThis is ONLY needed for Windows compilations.\n","undoManager":{"mark":-1,"position":44,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":20,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":20,"column":0},"end":{"row":40,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":40,"column":0},"end":{"row":60,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":0},"end":{"row":80,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":80,"column":0},"end":{"row":100,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":100,"column":0},"end":{"row":120,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":0},"end":{"row":140,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":140,"column":0},"end":{"row":160,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":160,"column":0},"end":{"row":180,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":180,"column":0},"end":{"row":200,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":200,"column":0},"end":{"row":220,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":220,"column":0},"end":{"row":240,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":240,"column":0},"end":{"row":260,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":260,"column":0},"end":{"row":280,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":280,"column":0},"end":{"row":300,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":300,"column":0},"end":{"row":320,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":320,"column":0},"end":{"row":340,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":340,"column":0},"end":{"row":360,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":360,"column":0},"end":{"row":380,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":380,"column":0},"end":{"row":400,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":400,"column":0},"end":{"row":420,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":420,"column":0},"end":{"row":440,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":440,"column":0},"end":{"row":460,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":460,"column":0},"end":{"row":480,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":480,"column":0},"end":{"row":500,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":500,"column":0},"end":{"row":520,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":520,"column":0},"end":{"row":540,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":540,"column":0},"action":"remove","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]},{"start":{"row":0,"column":0},"end":{"row":540,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":540,"column":0},"end":{"row":1080,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1080,"column":0},"end":{"row":1620,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1620,"column":0},"end":{"row":2160,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":2160,"column":0},"end":{"row":2700,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":2700,"column":0},"end":{"row":3240,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":3240,"column":0},"end":{"row":3780,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":3780,"column":0},"end":{"row":4320,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":4320,"column":0},"end":{"row":4860,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}],[{"group":"doc","deltas":[{"start":{"row":4860,"column":0},"end":{"row":5400,"column":0},"action":"insert","lines":["Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.","Notes about labs:","All labs are DUE by 5PM the day after the lab","No late labs will be accepted","Each labs counts as 2 homeworks","","1. Write a simple file copy program that ","a. Asks for, then reads the full path and name of an input file","b. Asks for, then reads the full path and name of an output file","c. Opens the input file","d. Reads data 1 byte at a time (be sure to use binary reading)","e. Writes the data to the output file","f. Computes the CPU time that was used from the start of reading the input file to the end of writing the output file","g. Prints the CPU time used.  ","h. Save this time in your notes.  You will compare it to the results of your Threaded Producer/Consumer Project","NOTES:","1. Use the definition of the input file used for the Producer/Consumer Project","2. If you use printf to print the times, use the format 10.3f to get proper results.","3. I have added a “#include” for <unistd.h> in the Linux section of the time_functions.h file.","4. Be sure that, when using Visual Studio, that you have defined your project as a WIN32 console project. This should automatically create the preprocessor variable “WIN32” in the GUI for you.  If it is not there, you can just type it in on the GUI panel:   (project properties/configuration properties/C/C++/preprocessor)","This is ONLY needed for Windows compilations.",""]}]}]]},"ace":{"folds":[],"scrolltop":80140,"scrollleft":0,"selection":{"start":{"row":5400,"column":0},"end":{"row":5400,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":5341,"state":"start","mode":"ace/mode/text"}},"timestamp":1422551392260}